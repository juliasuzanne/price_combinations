Categories
Build an API backend or HTML/CSS/JS frontend 
Solve an algorithm challenge with given inputs/outputs and/or automated tests
Solve a real world problem with basic coding techniques
Model a real world problem using object oriented design
Solve a real world problem using computer science data structures and algorithms

Notes:
Assignments generally can be completed using any programming language.
Assignments generally have a deadline of around a week.
Assignments vary greatly, from fair and clear, to unfair and unclear.
Many companies give the same assignment to every applicant, 
regardless of skill level.
For unfair assignments, it’s not necessary to get 100% of the problem correct. 
A human will be reviewing your code, so you are demonstrating more than just your ability to solve the problem completely.
The key, as always, is to decompose the problem and work through smaller, digestible pieces.
Since the assignment is take-home, use the power of research!
You can often find solutions to similar problems from an internet search.
Do not simply copy a solution, but read it to get an idea of how to approach the problem.

Build an API backend or HTML/CSS/JS frontend
Simple Vue.js List
For this exercise, you will need to build a simple Vue.js app to list the given quotes. Please do not use any libraries or plugins to do this other than the core Vue.js and, optionally, a library to fetch the quotes.
You can assume that you only need to support modern web browsers, so feel free to build the app using either the new ECMAScript 6 or the older ECMAScript 5 ("plain" JavaScript) standard.
Please provide the following functionality:
Required: Fetch quotes from the source quotes.json and display the available information in a list-like structure (table/list)
Required: Provide client-side pagination (up to 15 quotes per page)
Required: Provide a way to filter between game and movie quotes
Required: Provide a client-side search that filters by the quote text


Solve an algorithm challenge with given inputs/outputs and/or automated tests
Sequential Bi-grams
Given a string of words, create a set of every sequential bi-gram.  Bigrams are two-word combinations of the text, i.e. “Charlie rocks”.
 
Example
"Make a killer impression on whoever you’re meeting."
 
returns
“Make a"
“a killer"
“killer impression"
“impression on"
Etc.

requirements
Generates a set of every possible bigram from a string of text
Keep performance & memory usage in mind
Include tests
We prefer Ruby or Python, but you may use any language.



Solve a real world problem with basic coding techniques
Price Combinations
Requirements: 
Write a program which will process the data listed below. 
The data must be placed into a csv file and read from it.
The first line of the csv file is the target price and the following lines are menu items you could buy.
The program should then find a combination of dishes that has a total of exactly the target price. If there is no solution found, then the program should print that there is no combination of dishes that is equal to the target price. 
The program must run with different data files generated by us in the same format, so provide instructions on how to run the program from command line with command line parameters to read alternative input files.

Here are some sample data values: 

Target price, $15.05
mixed fruit,$2.15
french fries,$2.75
side salad,$3.35
hot wings,$3.55
mozzarella sticks,$4.20
sampler plate,$5.80

Model a real world problem using object oriented design
Simplified Blackjack
blackjack.rb contains initial work on a Blackjack game.
Your implementation should complete the initial work on the game and satisfy the following use cases and Blackjack rules:
As a Player I can get a hand with two cards in it
As a Dealer I can get a hand with two cards in it
As a Player I can see what card the dealer is showing
As a Player I can blackjack (win immediately) when I am dealt cards (this is a simplification)
As a Player I can bust (lose immediately) when I am getting cards
As a Dealer I can draw cards after the player until I win or lose
At the end of the round (after the Dealer's turn), the result of the round is determined
Rules:
Bust - Occurs when all possible hand values are greater than 21 points
Blackjack - Occurs when a player or dealer is dealt an ace and a 10-point card
Dealer - Stays on 17 or above
Round Flow - Player acts first, then the dealer acts if necessary
Please use your discretion in fixing/adding tests. You are free to use/convert to any testing framework you want.
For more information on blackjack, please refer to its wiki page.
Solve a real world problem using computer science data structures and algorithms
Mazes
Imagine a rectangular piece of graph paper. We could create a maze by coloring some of the lines to make walls. 
We call that maze well-formed if it has exactly two exterior openings (an entrance and an exit), and exactly one path that connects the two openings. 
1. Design a data structure that can represent a rectangular maze. 
2. Create an algorithm that determines whether the maze is well-formed. 
3. Report the solution if the maze is well-formed.

